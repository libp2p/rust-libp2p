use std::{
    fmt::Debug,
    task::{Context, Poll},
};

use libp2p_core::{Multiaddr, PeerId};
use libp2p_swarm::FromSwarm;

/// A store that contains all observed addresses of peers.
pub trait Store {
    /// Event generated by the store and emitted to [`Swarm`](libp2p_swarm::Swarm).
    /// [`Behaviour`](crate::Behaviour) cannot handle this event.
    type Event: Debug + Send;

    /// How this store handles events from [`Swarm`](libp2p_swarm::Swarm).
    fn on_swarm_event(&mut self, event: &FromSwarm);

    /// Get all stored addresses of the peer.
    fn addresses_of_peer(&self, peer: &PeerId) -> Option<impl Iterator<Item = &Multiaddr>>;

    /// Polls for things that the store should do.  
    /// The task should be waked up to emit events to [`Behaviour`](crate::Behaviour) and
    /// [`Swarm`](libp2p_swarm::Swarm).
    fn poll(&mut self, cx: &mut Context<'_>) -> Poll<Self::Event>;
}
