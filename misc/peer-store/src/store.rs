use std::{fmt::Debug, task::Context};

use libp2p_core::{Multiaddr, PeerId};
use libp2p_swarm::FromSwarm;

/// A store that
/// - contains all observed addresses of peers;
pub trait Store {
    /// Event generated by the store and emitted to [`Swarm`](libp2p_swarm::Swarm).
    /// [`Behaviour`](super::Behaviour) cannot handle this event.
    type FromStore: Debug + Send;

    /// How this store handles events from [`Swarm`](libp2p_swarm::Swarm).
    fn on_swarm_event(&mut self, event: &FromSwarm);

    /// Get all stored addresses of the peer.
    fn addresses_of_peer(&self, peer: &PeerId) -> Option<impl Iterator<Item = &Multiaddr>>;

    /// Trigger grabage collection for records.
    fn poll(&mut self, cx: &mut Context<'_>) -> Option<Event<Self::FromStore>>;
}

/// Event that will be handled by [`Behaviour`](super::Behaviour).  
pub enum Event<T> {
    /// An address record has been updated.
    RecordUpdated(PeerId),
    /// Event generated by the store.
    /// [`Behaviour`](super::Behaviour) can only forward the event to swarm.
    Store(T),
}

/// How the address is discovered.
#[derive(Debug, Clone, Copy)]
pub enum AddressSource {
    /// The address is discovered from a behaviour(e.g. kadelima, identify).
    Behaviour,
    /// We have direct connection to the address.
    DirectConnection,
    /// The address is manually added.
    Manual,
}
